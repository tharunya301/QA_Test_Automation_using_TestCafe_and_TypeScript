"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const connection_1 = __importDefault(require("../browser/connection"));
const injectables_1 = require("../assets/injectables");
const empty_page_markup_1 = __importDefault(require("./empty-page-markup"));
const http_status_codes_1 = require("http-status-codes");
const test_run_1 = require("../errors/test-run");
const cdp_1 = require("./utils/cdp");
const debug_loggers_1 = require("../utils/debug-loggers");
const string_1 = require("./utils/string");
const safe_api_1 = require("./request-pipeline/safe-api");
const RESPONSE_REMOVED_HEADERS = [
    'cross-origin-embedder-policy',
    'cross-origin-opener-policy',
    'cross-origin-resource-policy',
];
class ResourceInjector {
    constructor(browserId, specialServiceRoutes) {
        this._browserId = browserId;
        this._specialServiceRoutes = specialServiceRoutes;
    }
    get _browserConnection() {
        return connection_1.default.getById(this._browserId);
    }
    get _currentTestRun() {
        return this._browserConnection.getCurrentTestRun();
    }
    async _prepareInjectableResources({ isIframe, restoringStorages }) {
        const proxy = this._browserConnection.browserConnectionGateway.proxy;
        const windowId = this._browserConnection.activeWindowId;
        if (!this._currentTestRun)
            return null;
        const taskScript = await this._currentTestRun.session.getTaskScript({
            referer: '',
            cookieUrl: '',
            withPayload: true,
            serverInfo: proxy.server1Info,
            windowId,
            isIframe,
        });
        const injectableResources = {
            storages: restoringStorages,
            stylesheets: [
                injectables_1.TESTCAFE_UI_STYLES,
            ],
            scripts: [
                ...testcafe_hammerhead_1.INJECTABLE_SCRIPTS.map(hs => (0, testcafe_hammerhead_1.getAssetPath)(hs, proxy.options.developmentMode)),
                ...injectables_1.SCRIPTS.map(s => (0, testcafe_hammerhead_1.getAssetPath)(s, proxy.options.developmentMode)),
            ],
            embeddedScripts: [taskScript],
        };
        injectableResources.scripts = injectableResources.scripts.map(script => proxy.resolveRelativeServiceUrl(script));
        injectableResources.stylesheets = injectableResources.stylesheets.map(style => proxy.resolveRelativeServiceUrl(style));
        return injectableResources;
    }
    _processResponseHeaders(headers) {
        if (!headers)
            return [];
        headers = headers.filter(header => !RESPONSE_REMOVED_HEADERS.includes(header.name.toLowerCase()));
        return (0, string_1.stringifyHeaderValues)(headers);
    }
    async _fulfillRequest(client, fulfillRequestInfo, body) {
        await (0, safe_api_1.safeFulfillRequest)(client, {
            requestId: fulfillRequestInfo.requestId,
            responseCode: fulfillRequestInfo.responseCode || http_status_codes_1.StatusCodes.OK,
            responsePhrase: fulfillRequestInfo.responsePhrase,
            responseHeaders: this._processResponseHeaders(fulfillRequestInfo.responseHeaders),
            body: (0, string_1.toBase64String)(body),
        });
    }
    async redirectToErrorPage(client, err, url) {
        const browserConnection = connection_1.default.getById(this._browserId);
        const currentTestRun = browserConnection.getCurrentTestRun();
        if (!currentTestRun)
            return;
        currentTestRun.pendingPageError = new test_run_1.PageLoadError(err, url);
        await (0, cdp_1.navigateTo)(client, this._specialServiceRoutes.errorPage1);
    }
    async getDocumentResourceInfo(event, client) {
        const { requestId, request, responseErrorReason, resourceType, } = event;
        if (resourceType !== 'Document') {
            return {
                error: null,
                body: null,
            };
        }
        try {
            if (responseErrorReason === 'NameNotResolved') {
                const err = new Error(`Failed to find a DNS-record for the resource at "${event.request.url}"`);
                return {
                    error: err,
                    body: null,
                };
            }
            const responseObj = await client.Fetch.getResponseBody({ requestId });
            const responseStr = (0, string_1.getResponseAsString)(responseObj);
            return {
                error: null,
                body: Buffer.from(responseStr),
            };
        }
        catch (err) {
            (0, debug_loggers_1.resourceInjectorLogger)('Failed to process request: %s', request.url);
            return {
                error: err,
                body: null,
            };
        }
    }
    async processAboutBlankPage(event, client) {
        (0, debug_loggers_1.resourceInjectorLogger)('Handle page as about:blank. Origin url: %s', event.frame.url);
        const injectableResources = await this._prepareInjectableResources({ isIframe: false });
        const html = (0, testcafe_hammerhead_1.injectResources)(empty_page_markup_1.default, injectableResources);
        await client.Page.setDocumentContent({
            frameId: event.frame.id,
            html,
        });
    }
    async processHTMLPageContent(fulfillRequestInfo, injectableResourcesOptions, client) {
        const injectableResources = await this._prepareInjectableResources(injectableResourcesOptions);
        // NOTE: an unhandled exception interrupts the test execution,
        // and we are force to redirect manually to the idle page.
        if (!injectableResources)
            await (0, cdp_1.redirect)(client, fulfillRequestInfo.requestId, this._specialServiceRoutes.idlePage);
        else {
            const updatedResponseStr = (0, testcafe_hammerhead_1.injectResources)(fulfillRequestInfo.body, injectableResources, this._getPageInjectableResourcesOptions(injectableResourcesOptions));
            await this._fulfillRequest(client, fulfillRequestInfo, updatedResponseStr);
        }
    }
    async processNonProxiedContent(fulfillRequestInfo, client) {
        await this._fulfillRequest(client, fulfillRequestInfo, fulfillRequestInfo.body);
    }
    _getPageInjectableResourcesOptions(injectableResourcesOptions) {
        const { url, restoringStorages } = injectableResourcesOptions;
        if (url && restoringStorages) {
            return {
                host: new URL(url).host,
                sessionId: this._currentTestRun.session.id,
            };
        }
        return void 0;
    }
}
exports.default = ResourceInjector;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,