"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_pipeline_1 = __importDefault(require("./request-pipeline"));
const add_custom_debug_formatters_1 = __importDefault(require("./add-custom-debug-formatters"));
const debug_loggers_1 = require("../utils/debug-loggers");
const ALL_REQUEST_RESPONSES = { requestStage: 'Request' };
const ALL_REQUEST_REQUESTS = { requestStage: 'Response' };
const ALL_REQUESTS_DATA = [ALL_REQUEST_REQUESTS, ALL_REQUEST_RESPONSES];
class Proxyless {
    constructor(browserId, client) {
        this._client = client;
        this.requestPipeline = new request_pipeline_1.default(browserId, client);
        (0, add_custom_debug_formatters_1.default)();
    }
    async init(options) {
        // NOTE: We are forced to handle all requests and responses at once
        // because CDP API does not allow specifying request filtering behavior for different handlers.
        await this._client.Fetch.enable({
            patterns: ALL_REQUESTS_DATA,
        });
        await this.requestPipeline.init(options);
        (0, debug_loggers_1.proxylessLogger)('proxyless initialized');
    }
    async dispose() {
        this.requestPipeline.stop();
        await this._client.Fetch.disable();
        (0, debug_loggers_1.proxylessLogger)('proxyless disposed');
    }
}
exports.default = Proxyless;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJveHlsZXNzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EsMEVBQTBEO0FBQzFELGdHQUFxRTtBQUVyRSwwREFBeUQ7QUFFekQsTUFBTSxxQkFBcUIsR0FBRyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQW9CLENBQUM7QUFDNUUsTUFBTSxvQkFBb0IsR0FBSSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQW9CLENBQUM7QUFFN0UsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLG9CQUFvQixFQUFFLHFCQUFxQixDQUFDLENBQUM7QUFFeEUsTUFBcUIsU0FBUztJQUkxQixZQUFvQixTQUFpQixFQUFFLE1BQW1CO1FBQ3RELElBQUksQ0FBQyxPQUFPLEdBQVcsTUFBTSxDQUFDO1FBQzlCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSwwQkFBd0IsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFdkUsSUFBQSxxQ0FBd0IsR0FBRSxDQUFDO0lBQy9CLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSSxDQUFFLE9BQThCO1FBQzdDLG1FQUFtRTtRQUNuRSwrRkFBK0Y7UUFDL0YsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7WUFDNUIsUUFBUSxFQUFFLGlCQUFpQjtTQUM5QixDQUFDLENBQUM7UUFFSCxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXpDLElBQUEsK0JBQWUsRUFBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTztRQUNoQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRTVCLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFbkMsSUFBQSwrQkFBZSxFQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDMUMsQ0FBQztDQUNKO0FBOUJELDRCQThCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3RvY29sQXBpIH0gZnJvbSAnY2hyb21lLXJlbW90ZS1pbnRlcmZhY2UnO1xuaW1wb3J0IFByb3RvY29sIGZyb20gJ2RldnRvb2xzLXByb3RvY29sJztcbmltcG9ydCBSZXF1ZXN0UGF0dGVybiA9IFByb3RvY29sLk5ldHdvcmsuUmVxdWVzdFBhdHRlcm47XG5pbXBvcnQgUHJveHlsZXNzUmVxdWVzdFBpcGVsaW5lIGZyb20gJy4vcmVxdWVzdC1waXBlbGluZSc7XG5pbXBvcnQgYWRkQ3VzdG9tRGVidWdGb3JtYXR0ZXJzIGZyb20gJy4vYWRkLWN1c3RvbS1kZWJ1Zy1mb3JtYXR0ZXJzJztcbmltcG9ydCB7IFByb3h5bGVzc1NldHVwT3B0aW9ucyB9IGZyb20gJy4uL3NoYXJlZC90eXBlcyc7XG5pbXBvcnQgeyBwcm94eWxlc3NMb2dnZXIgfSBmcm9tICcuLi91dGlscy9kZWJ1Zy1sb2dnZXJzJztcblxuY29uc3QgQUxMX1JFUVVFU1RfUkVTUE9OU0VTID0geyByZXF1ZXN0U3RhZ2U6ICdSZXF1ZXN0JyB9IGFzIFJlcXVlc3RQYXR0ZXJuO1xuY29uc3QgQUxMX1JFUVVFU1RfUkVRVUVTVFMgID0geyByZXF1ZXN0U3RhZ2U6ICdSZXNwb25zZScgfSBhcyBSZXF1ZXN0UGF0dGVybjtcblxuY29uc3QgQUxMX1JFUVVFU1RTX0RBVEEgPSBbQUxMX1JFUVVFU1RfUkVRVUVTVFMsIEFMTF9SRVFVRVNUX1JFU1BPTlNFU107XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb3h5bGVzcyB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2xpZW50OiBQcm90b2NvbEFwaTtcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmVxdWVzdFBpcGVsaW5lO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChicm93c2VySWQ6IHN0cmluZywgY2xpZW50OiBQcm90b2NvbEFwaSkge1xuICAgICAgICB0aGlzLl9jbGllbnQgICAgICAgICA9IGNsaWVudDtcbiAgICAgICAgdGhpcy5yZXF1ZXN0UGlwZWxpbmUgPSBuZXcgUHJveHlsZXNzUmVxdWVzdFBpcGVsaW5lKGJyb3dzZXJJZCwgY2xpZW50KTtcblxuICAgICAgICBhZGRDdXN0b21EZWJ1Z0Zvcm1hdHRlcnMoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaW5pdCAob3B0aW9uczogUHJveHlsZXNzU2V0dXBPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIC8vIE5PVEU6IFdlIGFyZSBmb3JjZWQgdG8gaGFuZGxlIGFsbCByZXF1ZXN0cyBhbmQgcmVzcG9uc2VzIGF0IG9uY2VcbiAgICAgICAgLy8gYmVjYXVzZSBDRFAgQVBJIGRvZXMgbm90IGFsbG93IHNwZWNpZnlpbmcgcmVxdWVzdCBmaWx0ZXJpbmcgYmVoYXZpb3IgZm9yIGRpZmZlcmVudCBoYW5kbGVycy5cbiAgICAgICAgYXdhaXQgdGhpcy5fY2xpZW50LkZldGNoLmVuYWJsZSh7XG4gICAgICAgICAgICBwYXR0ZXJuczogQUxMX1JFUVVFU1RTX0RBVEEsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGF3YWl0IHRoaXMucmVxdWVzdFBpcGVsaW5lLmluaXQob3B0aW9ucyk7XG5cbiAgICAgICAgcHJveHlsZXNzTG9nZ2VyKCdwcm94eWxlc3MgaW5pdGlhbGl6ZWQnKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZGlzcG9zZSAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMucmVxdWVzdFBpcGVsaW5lLnN0b3AoKTtcblxuICAgICAgICBhd2FpdCB0aGlzLl9jbGllbnQuRmV0Y2guZGlzYWJsZSgpO1xuXG4gICAgICAgIHByb3h5bGVzc0xvZ2dlcigncHJveHlsZXNzIGRpc3Bvc2VkJyk7XG4gICAgfVxufVxuIl19