"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRequestPausedEventForResponse = exports.isPreflightRequest = exports.isRequestPausedEvent = exports.isRequest = exports.navigateTo = exports.redirect = void 0;
const http_status_codes_1 = require("http-status-codes");
const headers_1 = require("./headers");
async function redirect(client, requestId, url) {
    await client.Fetch.fulfillRequest({
        requestId,
        responseCode: http_status_codes_1.StatusCodes.MOVED_PERMANENTLY,
        responseHeaders: [
            { name: 'location', value: url },
        ],
    });
}
exports.redirect = redirect;
async function navigateTo(client, url) {
    await client.Page.navigate({ url });
}
exports.navigateTo = navigateTo;
function isRequest(event) {
    return event.responseStatusCode === void 0;
}
exports.isRequest = isRequest;
function isRequestPausedEvent(val) {
    return val && val.frameId && typeof val.request === 'object';
}
exports.isRequestPausedEvent = isRequestPausedEvent;
function isPreflightRequest(event) {
    return event.request.method === 'OPTIONS';
}
exports.isPreflightRequest = isPreflightRequest;
function createRequestPausedEventForResponse(mockedResponse, requestEvent) {
    return Object.assign({}, requestEvent, {
        responseStatusCode: mockedResponse.statusCode,
        responseHeaders: (0, headers_1.convertToHeaderEntries)(mockedResponse.headers),
    });
}
exports.createRequestPausedEventForResponse = createRequestPausedEventForResponse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb3h5bGVzcy91dGlscy9jZHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EseURBQWdEO0FBSWhELHVDQUFtRDtBQUc1QyxLQUFLLFVBQVUsUUFBUSxDQUFFLE1BQW1CLEVBQUUsU0FBaUIsRUFBRSxHQUFXO0lBQy9FLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUM7UUFDOUIsU0FBUztRQUNULFlBQVksRUFBSywrQkFBVyxDQUFDLGlCQUFpQjtRQUM5QyxlQUFlLEVBQUU7WUFDYixFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtTQUNuQztLQUNKLENBQUMsQ0FBQztBQUNQLENBQUM7QUFSRCw0QkFRQztBQUVNLEtBQUssVUFBVSxVQUFVLENBQUUsTUFBbUIsRUFBRSxHQUFXO0lBQzlELE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFGRCxnQ0FFQztBQUVELFNBQWdCLFNBQVMsQ0FBRSxLQUF5QjtJQUNoRCxPQUFPLEtBQUssQ0FBQyxrQkFBa0IsS0FBSyxLQUFLLENBQUMsQ0FBQztBQUMvQyxDQUFDO0FBRkQsOEJBRUM7QUFFRCxTQUFnQixvQkFBb0IsQ0FBRSxHQUFRO0lBQzFDLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxPQUFPLElBQUksT0FBTyxHQUFHLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQztBQUNqRSxDQUFDO0FBRkQsb0RBRUM7QUFFRCxTQUFnQixrQkFBa0IsQ0FBRSxLQUF5QjtJQUN6RCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUM5QyxDQUFDO0FBRkQsZ0RBRUM7QUFFRCxTQUFnQixtQ0FBbUMsQ0FBRSxjQUFtQyxFQUFFLFlBQWdDO0lBQ3RILE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFO1FBQ25DLGtCQUFrQixFQUFFLGNBQWMsQ0FBQyxVQUFVO1FBQzdDLGVBQWUsRUFBSyxJQUFBLGdDQUFzQixFQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUM7S0FDckUsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUxELGtGQUtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdG9jb2xBcGkgfSBmcm9tICdjaHJvbWUtcmVtb3RlLWludGVyZmFjZSc7XG5pbXBvcnQgeyBTdGF0dXNDb2RlcyB9IGZyb20gJ2h0dHAtc3RhdHVzLWNvZGVzJztcbmltcG9ydCBQcm90b2NvbCBmcm9tICdkZXZ0b29scy1wcm90b2NvbCc7XG5pbXBvcnQgUmVxdWVzdFBhdXNlZEV2ZW50ID0gUHJvdG9jb2wuRmV0Y2guUmVxdWVzdFBhdXNlZEV2ZW50O1xuaW1wb3J0IHsgSW5jb21pbmdNZXNzYWdlTGlrZSB9IGZyb20gJ3Rlc3RjYWZlLWhhbW1lcmhlYWQnO1xuaW1wb3J0IHsgY29udmVydFRvSGVhZGVyRW50cmllcyB9IGZyb20gJy4vaGVhZGVycyc7XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlZGlyZWN0IChjbGllbnQ6IFByb3RvY29sQXBpLCByZXF1ZXN0SWQ6IHN0cmluZywgdXJsOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBjbGllbnQuRmV0Y2guZnVsZmlsbFJlcXVlc3Qoe1xuICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgIHJlc3BvbnNlQ29kZTogICAgU3RhdHVzQ29kZXMuTU9WRURfUEVSTUFORU5UTFksXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczogW1xuICAgICAgICAgICAgeyBuYW1lOiAnbG9jYXRpb24nLCB2YWx1ZTogdXJsIH0sXG4gICAgICAgIF0sXG4gICAgfSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBuYXZpZ2F0ZVRvIChjbGllbnQ6IFByb3RvY29sQXBpLCB1cmw6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IGNsaWVudC5QYWdlLm5hdmlnYXRlKHsgdXJsIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNSZXF1ZXN0IChldmVudDogUmVxdWVzdFBhdXNlZEV2ZW50KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGV2ZW50LnJlc3BvbnNlU3RhdHVzQ29kZSA9PT0gdm9pZCAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNSZXF1ZXN0UGF1c2VkRXZlbnQgKHZhbDogYW55KTogdmFsIGlzIFJlcXVlc3RQYXVzZWRFdmVudCB7XG4gICAgcmV0dXJuIHZhbCAmJiB2YWwuZnJhbWVJZCAmJiB0eXBlb2YgdmFsLnJlcXVlc3QgPT09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQcmVmbGlnaHRSZXF1ZXN0IChldmVudDogUmVxdWVzdFBhdXNlZEV2ZW50KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGV2ZW50LnJlcXVlc3QubWV0aG9kID09PSAnT1BUSU9OUyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZXF1ZXN0UGF1c2VkRXZlbnRGb3JSZXNwb25zZSAobW9ja2VkUmVzcG9uc2U6IEluY29taW5nTWVzc2FnZUxpa2UsIHJlcXVlc3RFdmVudDogUmVxdWVzdFBhdXNlZEV2ZW50KTogUmVxdWVzdFBhdXNlZEV2ZW50IHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcmVxdWVzdEV2ZW50LCB7XG4gICAgICAgIHJlc3BvbnNlU3RhdHVzQ29kZTogbW9ja2VkUmVzcG9uc2Uuc3RhdHVzQ29kZSxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiAgICBjb252ZXJ0VG9IZWFkZXJFbnRyaWVzKG1vY2tlZFJlc3BvbnNlLmhlYWRlcnMpLFxuICAgIH0pO1xufVxuIl19