"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const injectables_1 = require("../../assets/injectables");
const debug_loggers_1 = require("../../utils/debug-loggers");
const cdp_1 = require("../utils/cdp");
const constants_1 = require("./constants");
const http_status_codes_1 = require("http-status-codes");
const load_assets_1 = __importDefault(require("../../load-assets"));
const string_1 = require("../utils/string");
const safe_api_1 = require("./safe-api");
const internalRequest = {
    condition: (event) => !event.networkId,
    handler: async (event, client) => {
        (0, debug_loggers_1.requestPipelineInternalRequestLogger)('%r', event);
        await (0, safe_api_1.safeFailRequest)(client, event);
    },
};
const serviceRequest = {
    condition: (event, options, serviceRoutes) => {
        const url = event.request.url;
        // NOTE: the service 'Error page' should be proxied.
        if (url === serviceRoutes.errorPage1
            || url === serviceRoutes.errorPage2)
            return false;
        return options.serviceDomains.some(domain => url.startsWith(domain));
    },
    handler: async (event, client) => {
        (0, debug_loggers_1.requestPipelineServiceRequestLogger)('%r', event);
        if ((0, cdp_1.isRequest)(event))
            await (0, safe_api_1.safeContinueRequest)(client, event);
        else
            await (0, safe_api_1.safeContinueResponse)(client, event);
    },
};
const defaultFaviconRequest = {
    condition: (event) => {
        const parsedUrl = new URL(event.request.url);
        return parsedUrl.pathname === injectables_1.DEFAULT_FAVICON_PATH;
    },
    handler: async (event, client, options) => {
        (0, debug_loggers_1.requestPipelineLogger)('%r', event);
        if ((0, cdp_1.isRequest)(event))
            await (0, safe_api_1.safeContinueRequest)(client, event);
        else {
            if (event.responseStatusCode === http_status_codes_1.StatusCodes.NOT_FOUND) { // eslint-disable-line no-lonely-if
                const { favIcon } = (0, load_assets_1.default)(options.developmentMode);
                await (0, safe_api_1.safeFulfillRequest)(client, {
                    requestId: event.requestId,
                    responseCode: http_status_codes_1.StatusCodes.OK,
                    responseHeaders: [constants_1.FAVICON_CONTENT_TYPE_HEADER],
                    body: (0, string_1.toBase64String)(favIcon),
                });
            }
            else
                await (0, safe_api_1.safeContinueResponse)(client, event);
        }
    },
};
const SPECIAL_REQUEST_HANDLERS = [
    internalRequest,
    serviceRequest,
    defaultFaviconRequest,
];
function getSpecialRequestHandler(event, options, serviceRoutes) {
    const specialRequestHandler = SPECIAL_REQUEST_HANDLERS.find(h => h.condition(event, options, serviceRoutes));
    return specialRequestHandler ? specialRequestHandler.handler : null;
}
exports.default = getSpecialRequestHandler;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY2lhbC1oYW5kbGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm94eWxlc3MvcmVxdWVzdC1waXBlbGluZS9zcGVjaWFsLWhhbmRsZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsMERBQWdFO0FBR2hFLDZEQUltQztBQUVuQyxzQ0FBeUM7QUFDekMsMkNBQTBEO0FBQzFELHlEQUFnRDtBQUNoRCxvRUFBMkM7QUFDM0MsNENBQWlEO0FBQ2pELHlDQUtvQjtBQUdwQixNQUFNLGVBQWUsR0FBRztJQUNwQixTQUFTLEVBQUUsQ0FBQyxLQUF5QixFQUFXLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTO0lBQ25FLE9BQU8sRUFBSSxLQUFLLEVBQUUsS0FBeUIsRUFBRSxNQUFtQixFQUFpQixFQUFFO1FBQy9FLElBQUEsb0RBQW9DLEVBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRWxELE1BQU0sSUFBQSwwQkFBZSxFQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN6QyxDQUFDO0NBQ2MsQ0FBQztBQUVwQixNQUFNLGNBQWMsR0FBRztJQUNuQixTQUFTLEVBQUUsQ0FBQyxLQUF5QixFQUFFLE9BQThCLEVBQUUsYUFBbUMsRUFBVyxFQUFFO1FBQ25ILE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBRTlCLG9EQUFvRDtRQUNwRCxJQUFJLEdBQUcsS0FBSyxhQUFhLENBQUMsVUFBVTtlQUM3QixHQUFHLEtBQUssYUFBYSxDQUFDLFVBQVU7WUFDbkMsT0FBTyxLQUFLLENBQUM7UUFFakIsT0FBTyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBQ0QsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUF5QixFQUFFLE1BQW1CLEVBQWlCLEVBQUU7UUFDN0UsSUFBQSxtREFBbUMsRUFBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFakQsSUFBSSxJQUFBLGVBQVMsRUFBQyxLQUFLLENBQUM7WUFDaEIsTUFBTSxJQUFBLDhCQUFtQixFQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQzs7WUFFekMsTUFBTSxJQUFBLCtCQUFvQixFQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRCxDQUFDO0NBQ2MsQ0FBQztBQUVwQixNQUFNLHFCQUFxQixHQUFHO0lBQzFCLFNBQVMsRUFBRSxDQUFDLEtBQXlCLEVBQVcsRUFBRTtRQUM5QyxNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTdDLE9BQU8sU0FBUyxDQUFDLFFBQVEsS0FBSyxrQ0FBb0IsQ0FBQztJQUN2RCxDQUFDO0lBQ0QsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUF5QixFQUFFLE1BQW1CLEVBQUUsT0FBOEIsRUFBaUIsRUFBRTtRQUM3RyxJQUFBLHFDQUFxQixFQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVuQyxJQUFJLElBQUEsZUFBUyxFQUFDLEtBQUssQ0FBQztZQUNoQixNQUFNLElBQUEsOEJBQW1CLEVBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ3hDO1lBQ0QsSUFBSSxLQUFLLENBQUMsa0JBQWtCLEtBQUssK0JBQVcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxtQ0FBbUM7Z0JBQ3pGLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFBLHFCQUFVLEVBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUV4RCxNQUFNLElBQUEsNkJBQWtCLEVBQUMsTUFBTSxFQUFFO29CQUM3QixTQUFTLEVBQVEsS0FBSyxDQUFDLFNBQVM7b0JBQ2hDLFlBQVksRUFBSywrQkFBVyxDQUFDLEVBQUU7b0JBQy9CLGVBQWUsRUFBRSxDQUFFLHVDQUEyQixDQUFFO29CQUNoRCxJQUFJLEVBQWEsSUFBQSx1QkFBYyxFQUFDLE9BQU8sQ0FBQztpQkFDM0MsQ0FBQyxDQUFDO2FBQ047O2dCQUVHLE1BQU0sSUFBQSwrQkFBb0IsRUFBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDakQ7SUFDTCxDQUFDO0NBQ2MsQ0FBQztBQUVwQixNQUFNLHdCQUF3QixHQUFHO0lBQzdCLGVBQWU7SUFDZixjQUFjO0lBQ2QscUJBQXFCO0NBQ3hCLENBQUM7QUFFRixTQUF3Qix3QkFBd0IsQ0FBRSxLQUF5QixFQUFFLE9BQStCLEVBQUUsYUFBb0M7SUFDOUksTUFBTSxxQkFBcUIsR0FBRyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUU3RyxPQUFPLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUN4RSxDQUFDO0FBSkQsMkNBSUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvdG9jb2wgZnJvbSAnZGV2dG9vbHMtcHJvdG9jb2wnO1xuaW1wb3J0IFJlcXVlc3RQYXVzZWRFdmVudCA9IFByb3RvY29sLkZldGNoLlJlcXVlc3RQYXVzZWRFdmVudDtcbmltcG9ydCB7IERFRkFVTFRfRkFWSUNPTl9QQVRIIH0gZnJvbSAnLi4vLi4vYXNzZXRzL2luamVjdGFibGVzJztcbmltcG9ydCB7IFJlcXVlc3RIYW5kbGVyLCBTcGVjaWFsU2VydmljZVJvdXRlcyB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IFByb3RvY29sQXBpIH0gZnJvbSAnY2hyb21lLXJlbW90ZS1pbnRlcmZhY2UnO1xuaW1wb3J0IHtcbiAgICByZXF1ZXN0UGlwZWxpbmVJbnRlcm5hbFJlcXVlc3RMb2dnZXIsXG4gICAgcmVxdWVzdFBpcGVsaW5lTG9nZ2VyLFxuICAgIHJlcXVlc3RQaXBlbGluZVNlcnZpY2VSZXF1ZXN0TG9nZ2VyLFxufSBmcm9tICcuLi8uLi91dGlscy9kZWJ1Zy1sb2dnZXJzJztcbmltcG9ydCB7IFByb3h5bGVzc1NldHVwT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NoYXJlZC90eXBlcyc7XG5pbXBvcnQgeyBpc1JlcXVlc3QgfSBmcm9tICcuLi91dGlscy9jZHAnO1xuaW1wb3J0IHsgRkFWSUNPTl9DT05URU5UX1RZUEVfSEVBREVSIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgU3RhdHVzQ29kZXMgfSBmcm9tICdodHRwLXN0YXR1cy1jb2Rlcyc7XG5pbXBvcnQgbG9hZEFzc2V0cyBmcm9tICcuLi8uLi9sb2FkLWFzc2V0cyc7XG5pbXBvcnQgeyB0b0Jhc2U2NFN0cmluZyB9IGZyb20gJy4uL3V0aWxzL3N0cmluZyc7XG5pbXBvcnQge1xuICAgIHNhZmVDb250aW51ZVJlcXVlc3QsXG4gICAgc2FmZUNvbnRpbnVlUmVzcG9uc2UsXG4gICAgc2FmZUZhaWxSZXF1ZXN0LFxuICAgIHNhZmVGdWxmaWxsUmVxdWVzdCxcbn0gZnJvbSAnLi9zYWZlLWFwaSc7XG5cblxuY29uc3QgaW50ZXJuYWxSZXF1ZXN0ID0ge1xuICAgIGNvbmRpdGlvbjogKGV2ZW50OiBSZXF1ZXN0UGF1c2VkRXZlbnQpOiBib29sZWFuID0+ICFldmVudC5uZXR3b3JrSWQsXG4gICAgaGFuZGxlcjogICBhc3luYyAoZXZlbnQ6IFJlcXVlc3RQYXVzZWRFdmVudCwgY2xpZW50OiBQcm90b2NvbEFwaSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgICByZXF1ZXN0UGlwZWxpbmVJbnRlcm5hbFJlcXVlc3RMb2dnZXIoJyVyJywgZXZlbnQpO1xuXG4gICAgICAgIGF3YWl0IHNhZmVGYWlsUmVxdWVzdChjbGllbnQsIGV2ZW50KTtcbiAgICB9LFxufSBhcyBSZXF1ZXN0SGFuZGxlcjtcblxuY29uc3Qgc2VydmljZVJlcXVlc3QgPSB7XG4gICAgY29uZGl0aW9uOiAoZXZlbnQ6IFJlcXVlc3RQYXVzZWRFdmVudCwgb3B0aW9uczogUHJveHlsZXNzU2V0dXBPcHRpb25zLCBzZXJ2aWNlUm91dGVzOiBTcGVjaWFsU2VydmljZVJvdXRlcyk6IGJvb2xlYW4gPT4ge1xuICAgICAgICBjb25zdCB1cmwgPSBldmVudC5yZXF1ZXN0LnVybDtcblxuICAgICAgICAvLyBOT1RFOiB0aGUgc2VydmljZSAnRXJyb3IgcGFnZScgc2hvdWxkIGJlIHByb3hpZWQuXG4gICAgICAgIGlmICh1cmwgPT09IHNlcnZpY2VSb3V0ZXMuZXJyb3JQYWdlMVxuICAgICAgICAgICAgfHwgdXJsID09PSBzZXJ2aWNlUm91dGVzLmVycm9yUGFnZTIpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuc2VydmljZURvbWFpbnMuc29tZShkb21haW4gPT4gdXJsLnN0YXJ0c1dpdGgoZG9tYWluKSk7XG4gICAgfSxcbiAgICBoYW5kbGVyOiBhc3luYyAoZXZlbnQ6IFJlcXVlc3RQYXVzZWRFdmVudCwgY2xpZW50OiBQcm90b2NvbEFwaSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgICByZXF1ZXN0UGlwZWxpbmVTZXJ2aWNlUmVxdWVzdExvZ2dlcignJXInLCBldmVudCk7XG5cbiAgICAgICAgaWYgKGlzUmVxdWVzdChldmVudCkpXG4gICAgICAgICAgICBhd2FpdCBzYWZlQ29udGludWVSZXF1ZXN0KGNsaWVudCwgZXZlbnQpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBhd2FpdCBzYWZlQ29udGludWVSZXNwb25zZShjbGllbnQsIGV2ZW50KTtcbiAgICB9LFxufSBhcyBSZXF1ZXN0SGFuZGxlcjtcblxuY29uc3QgZGVmYXVsdEZhdmljb25SZXF1ZXN0ID0ge1xuICAgIGNvbmRpdGlvbjogKGV2ZW50OiBSZXF1ZXN0UGF1c2VkRXZlbnQpOiBib29sZWFuID0+IHtcbiAgICAgICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTChldmVudC5yZXF1ZXN0LnVybCk7XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlZFVybC5wYXRobmFtZSA9PT0gREVGQVVMVF9GQVZJQ09OX1BBVEg7XG4gICAgfSxcbiAgICBoYW5kbGVyOiBhc3luYyAoZXZlbnQ6IFJlcXVlc3RQYXVzZWRFdmVudCwgY2xpZW50OiBQcm90b2NvbEFwaSwgb3B0aW9uczogUHJveHlsZXNzU2V0dXBPcHRpb25zKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgICAgIHJlcXVlc3RQaXBlbGluZUxvZ2dlcignJXInLCBldmVudCk7XG5cbiAgICAgICAgaWYgKGlzUmVxdWVzdChldmVudCkpXG4gICAgICAgICAgICBhd2FpdCBzYWZlQ29udGludWVSZXF1ZXN0KGNsaWVudCwgZXZlbnQpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChldmVudC5yZXNwb25zZVN0YXR1c0NvZGUgPT09IFN0YXR1c0NvZGVzLk5PVF9GT1VORCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWxvbmVseS1pZlxuICAgICAgICAgICAgICAgIGNvbnN0IHsgZmF2SWNvbiB9ID0gbG9hZEFzc2V0cyhvcHRpb25zLmRldmVsb3BtZW50TW9kZSk7XG5cbiAgICAgICAgICAgICAgICBhd2FpdCBzYWZlRnVsZmlsbFJlcXVlc3QoY2xpZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogICAgICAgZXZlbnQucmVxdWVzdElkLFxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZUNvZGU6ICAgIFN0YXR1c0NvZGVzLk9LLFxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZUhlYWRlcnM6IFsgRkFWSUNPTl9DT05URU5UX1RZUEVfSEVBREVSIF0sXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6ICAgICAgICAgICAgdG9CYXNlNjRTdHJpbmcoZmF2SWNvbiksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgYXdhaXQgc2FmZUNvbnRpbnVlUmVzcG9uc2UoY2xpZW50LCBldmVudCk7XG4gICAgICAgIH1cbiAgICB9LFxufSBhcyBSZXF1ZXN0SGFuZGxlcjtcblxuY29uc3QgU1BFQ0lBTF9SRVFVRVNUX0hBTkRMRVJTID0gW1xuICAgIGludGVybmFsUmVxdWVzdCxcbiAgICBzZXJ2aWNlUmVxdWVzdCxcbiAgICBkZWZhdWx0RmF2aWNvblJlcXVlc3QsXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTcGVjaWFsUmVxdWVzdEhhbmRsZXIgKGV2ZW50OiBSZXF1ZXN0UGF1c2VkRXZlbnQsIG9wdGlvbnM/OiBQcm94eWxlc3NTZXR1cE9wdGlvbnMsIHNlcnZpY2VSb3V0ZXM/OiBTcGVjaWFsU2VydmljZVJvdXRlcyk6IGFueSB7XG4gICAgY29uc3Qgc3BlY2lhbFJlcXVlc3RIYW5kbGVyID0gU1BFQ0lBTF9SRVFVRVNUX0hBTkRMRVJTLmZpbmQoaCA9PiBoLmNvbmRpdGlvbihldmVudCwgb3B0aW9ucywgc2VydmljZVJvdXRlcykpO1xuXG4gICAgcmV0dXJuIHNwZWNpYWxSZXF1ZXN0SGFuZGxlciA/IHNwZWNpYWxSZXF1ZXN0SGFuZGxlci5oYW5kbGVyIDogbnVsbDtcbn1cblxuIl19