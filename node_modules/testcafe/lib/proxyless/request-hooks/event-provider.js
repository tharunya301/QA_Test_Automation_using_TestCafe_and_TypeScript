"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const pipeline_context_1 = __importDefault(require("./pipeline-context"));
const event_factory_1 = __importDefault(require("./event-factory"));
const string_1 = require("../utils/string");
const connection_1 = __importDefault(require("../../browser/connection"));
const cdp_1 = require("../utils/cdp");
class ProxylessRequestHookEventProvider extends testcafe_hammerhead_1.RequestHookEventProvider {
    constructor(browserId) {
        super();
        this._pipelineContexts = {};
        this._eventFactories = {};
        this._browserId = browserId;
    }
    _createPipelineContext(requestId) {
        const pipelineContext = new pipeline_context_1.default(requestId);
        this._pipelineContexts[requestId] = pipelineContext;
        return pipelineContext;
    }
    _getSessionId() {
        const browserConnection = connection_1.default.getById(this._browserId);
        const currentTestRun = browserConnection.getCurrentTestRun();
        return (currentTestRun === null || currentTestRun === void 0 ? void 0 : currentTestRun.id) || '';
    }
    _createEventFactory(event) {
        const sessionId = this._getSessionId();
        const eventFactory = new event_factory_1.default(event, sessionId);
        this._eventFactories[event.networkId] = eventFactory;
        return eventFactory;
    }
    getPipelineContext(requestId) {
        return this._pipelineContexts[requestId];
    }
    _getEventFactory(requestId) {
        return this._eventFactories[requestId];
    }
    _getContextData(event) {
        const pipelineContext = this.getPipelineContext(event.networkId);
        const eventFactory = this._getEventFactory(event.networkId);
        return { pipelineContext, eventFactory };
    }
    static _hasResponseWithBody(context) {
        return context.onResponseEventData.some((eventData) => eventData.opts.includeBody);
    }
    static async _setResponseBody({ pipelineContext, resourceBody, eventFactory, event, client }) {
        if ((resourceBody === null || resourceBody === void 0 ? void 0 : resourceBody.length) || (0, cdp_1.isPreflightRequest)(event)) {
            eventFactory.setResponseBody(resourceBody);
            return;
        }
        const hasOnResponseWithBody = ProxylessRequestHookEventProvider._hasResponseWithBody(pipelineContext);
        if (!hasOnResponseWithBody)
            return;
        const responseObj = await client.Fetch.getResponseBody({ requestId: event.requestId });
        const responseBody = (0, string_1.getResponseAsBuffer)(responseObj);
        eventFactory.setResponseBody(responseBody);
    }
    cleanUp(requestId) {
        delete this._pipelineContexts[requestId];
        delete this._eventFactories[requestId];
    }
    async onRequest(event) {
        if (!this.hasRequestEventListeners())
            return;
        const pipelineContext = this._createPipelineContext(event.networkId);
        const eventFactory = this._createEventFactory(event);
        pipelineContext.setRequestOptions(eventFactory);
        await pipelineContext.onRequestHookRequest(this, eventFactory);
    }
    async onResponse(event, resourceBody, client) {
        let modified = false;
        if (!this.hasRequestEventListeners()) {
            this.cleanUp(event.networkId);
            return modified;
        }
        const { pipelineContext, eventFactory } = this._getContextData(event);
        eventFactory.update(event);
        await pipelineContext.onRequestHookConfigureResponse(this, eventFactory);
        if (eventFactory.headersModified)
            modified = true;
        await ProxylessRequestHookEventProvider._setResponseBody({
            pipelineContext,
            resourceBody,
            eventFactory,
            event,
            client,
        });
        await Promise.all(pipelineContext.onResponseEventData.map(async (eventData) => {
            await pipelineContext.onRequestHookResponse(this, eventFactory, eventData.rule, eventData.opts);
        }));
        this.cleanUp(event.networkId);
        return modified;
    }
}
exports.default = ProxylessRequestHookEventProvider;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,