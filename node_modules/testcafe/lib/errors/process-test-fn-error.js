"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const get_callsite_1 = require("./get-callsite");
const runtime_1 = require("./runtime");
const error_list_1 = __importDefault(require("./error-list"));
const internal_modules_prefix_1 = __importDefault(require("./internal-modules-prefix"));
const node_modules_folder_name_1 = __importDefault(require("../utils/node-modules-folder-name"));
const test_run_1 = require("./test-run");
const debug_1 = __importDefault(require("debug"));
const debugLog = (0, debug_1.default)('testcafe:errors');
function isAssertionErrorCallsiteFrame(frame) {
    const filename = frame.getFileName();
    // NOTE: filter out the internals of node.js and assertion libraries
    return filename &&
        filename.includes(path_1.sep) &&
        !filename.startsWith(internal_modules_prefix_1.default) &&
        !filename.includes(`${path_1.sep}${node_modules_folder_name_1.default}${path_1.sep}`);
}
function processTestFnError(err) {
    debugLog('processTestFnError: %O', err);
    if (err && (err.isTestCafeError || err instanceof error_list_1.default))
        return err;
    if (err && err instanceof runtime_1.APIError)
        return new test_run_1.UncaughtErrorInTestCode(err);
    if (err instanceof Error) {
        const isAssertionError = err.name === 'AssertionError' || err.constructor.name === 'AssertionError';
        // NOTE: assertion libraries can add their source files to the error stack frames.
        // We should skip them to create a correct callsite for the assertion error.
        const callsite = isAssertionError ? (0, get_callsite_1.getCallsiteForError)(err, isAssertionErrorCallsiteFrame) : (0, get_callsite_1.getCallsiteForError)(err);
        return isAssertionError ?
            new test_run_1.ExternalAssertionLibraryError(err, callsite) :
            new test_run_1.UncaughtErrorInTestCode(err, callsite);
    }
    if (err && err.isInternalError)
        return new test_run_1.UncaughtExceptionError(err.stack);
    return new test_run_1.UncaughtNonErrorObjectInTestCode(err);
}
exports.default = processTestFnError;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy10ZXN0LWZuLWVycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Vycm9ycy9wcm9jZXNzLXRlc3QtZm4tZXJyb3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwrQkFBMkI7QUFDM0IsaURBQXFEO0FBQ3JELHVDQUFxQztBQUNyQyw4REFBNkM7QUFDN0Msd0ZBQWdFO0FBQ2hFLGlHQUE2RDtBQUU3RCx5Q0FLb0I7QUFDcEIsa0RBQTBCO0FBRTFCLE1BQU0sUUFBUSxHQUFHLElBQUEsZUFBSyxFQUFDLGlCQUFpQixDQUFDLENBQUM7QUFHMUMsU0FBUyw2QkFBNkIsQ0FBRSxLQUFLO0lBQ3pDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUVyQyxvRUFBb0U7SUFDcEUsT0FBTyxRQUFRO1FBQ1gsUUFBUSxDQUFDLFFBQVEsQ0FBQyxVQUFHLENBQUM7UUFDdEIsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLGlDQUF1QixDQUFDO1FBQzdDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFVBQUcsR0FBRyxrQ0FBWSxHQUFHLFVBQUcsRUFBRSxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUVELFNBQXdCLGtCQUFrQixDQUFFLEdBQUc7SUFDM0MsUUFBUSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRXhDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsSUFBSSxHQUFHLFlBQVksb0JBQWlCLENBQUM7UUFDaEUsT0FBTyxHQUFHLENBQUM7SUFFZixJQUFJLEdBQUcsSUFBSSxHQUFHLFlBQVksa0JBQVE7UUFDOUIsT0FBTyxJQUFJLGtDQUF1QixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRTVDLElBQUksR0FBRyxZQUFZLEtBQUssRUFBRTtRQUN0QixNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxJQUFJLEtBQUssZ0JBQWdCLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssZ0JBQWdCLENBQUM7UUFFcEcsa0ZBQWtGO1FBQ2xGLDRFQUE0RTtRQUM1RSxNQUFNLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBQSxrQ0FBbUIsRUFBQyxHQUFHLEVBQUUsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBQSxrQ0FBbUIsRUFBQyxHQUFHLENBQUMsQ0FBQztRQUV2SCxPQUFPLGdCQUFnQixDQUFDLENBQUM7WUFDckIsSUFBSSx3Q0FBNkIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNsRCxJQUFJLGtDQUF1QixDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUNsRDtJQUVELElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxlQUFlO1FBQzFCLE9BQU8sSUFBSSxpQ0FBc0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFakQsT0FBTyxJQUFJLDJDQUFnQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JELENBQUM7QUF6QkQscUNBeUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2VwIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBnZXRDYWxsc2l0ZUZvckVycm9yIH0gZnJvbSAnLi9nZXQtY2FsbHNpdGUnO1xuaW1wb3J0IHsgQVBJRXJyb3IgfSBmcm9tICcuL3J1bnRpbWUnO1xuaW1wb3J0IFRlc3RDYWZlRXJyb3JMaXN0IGZyb20gJy4vZXJyb3ItbGlzdCc7XG5pbXBvcnQgSU5URVJOQUxfTU9EVUxFU19QUkVGSVggZnJvbSAnLi9pbnRlcm5hbC1tb2R1bGVzLXByZWZpeCc7XG5pbXBvcnQgTk9ERV9NT0RVTEVTIGZyb20gJy4uL3V0aWxzL25vZGUtbW9kdWxlcy1mb2xkZXItbmFtZSc7XG5cbmltcG9ydCB7XG4gICAgVW5jYXVnaHRFcnJvckluVGVzdENvZGUsXG4gICAgVW5jYXVnaHROb25FcnJvck9iamVjdEluVGVzdENvZGUsXG4gICAgRXh0ZXJuYWxBc3NlcnRpb25MaWJyYXJ5RXJyb3IsXG4gICAgVW5jYXVnaHRFeGNlcHRpb25FcnJvcixcbn0gZnJvbSAnLi90ZXN0LXJ1bic7XG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuXG5jb25zdCBkZWJ1Z0xvZyA9IGRlYnVnKCd0ZXN0Y2FmZTplcnJvcnMnKTtcblxuXG5mdW5jdGlvbiBpc0Fzc2VydGlvbkVycm9yQ2FsbHNpdGVGcmFtZSAoZnJhbWUpIHtcbiAgICBjb25zdCBmaWxlbmFtZSA9IGZyYW1lLmdldEZpbGVOYW1lKCk7XG5cbiAgICAvLyBOT1RFOiBmaWx0ZXIgb3V0IHRoZSBpbnRlcm5hbHMgb2Ygbm9kZS5qcyBhbmQgYXNzZXJ0aW9uIGxpYnJhcmllc1xuICAgIHJldHVybiBmaWxlbmFtZSAmJlxuICAgICAgICBmaWxlbmFtZS5pbmNsdWRlcyhzZXApICYmXG4gICAgICAgICFmaWxlbmFtZS5zdGFydHNXaXRoKElOVEVSTkFMX01PRFVMRVNfUFJFRklYKSAmJlxuICAgICAgICAhZmlsZW5hbWUuaW5jbHVkZXMoYCR7c2VwfSR7Tk9ERV9NT0RVTEVTfSR7c2VwfWApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9jZXNzVGVzdEZuRXJyb3IgKGVycikge1xuICAgIGRlYnVnTG9nKCdwcm9jZXNzVGVzdEZuRXJyb3I6ICVPJywgZXJyKTtcblxuICAgIGlmIChlcnIgJiYgKGVyci5pc1Rlc3RDYWZlRXJyb3IgfHwgZXJyIGluc3RhbmNlb2YgVGVzdENhZmVFcnJvckxpc3QpKVxuICAgICAgICByZXR1cm4gZXJyO1xuXG4gICAgaWYgKGVyciAmJiBlcnIgaW5zdGFuY2VvZiBBUElFcnJvcilcbiAgICAgICAgcmV0dXJuIG5ldyBVbmNhdWdodEVycm9ySW5UZXN0Q29kZShlcnIpO1xuXG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGNvbnN0IGlzQXNzZXJ0aW9uRXJyb3IgPSBlcnIubmFtZSA9PT0gJ0Fzc2VydGlvbkVycm9yJyB8fCBlcnIuY29uc3RydWN0b3IubmFtZSA9PT0gJ0Fzc2VydGlvbkVycm9yJztcblxuICAgICAgICAvLyBOT1RFOiBhc3NlcnRpb24gbGlicmFyaWVzIGNhbiBhZGQgdGhlaXIgc291cmNlIGZpbGVzIHRvIHRoZSBlcnJvciBzdGFjayBmcmFtZXMuXG4gICAgICAgIC8vIFdlIHNob3VsZCBza2lwIHRoZW0gdG8gY3JlYXRlIGEgY29ycmVjdCBjYWxsc2l0ZSBmb3IgdGhlIGFzc2VydGlvbiBlcnJvci5cbiAgICAgICAgY29uc3QgY2FsbHNpdGUgPSBpc0Fzc2VydGlvbkVycm9yID8gZ2V0Q2FsbHNpdGVGb3JFcnJvcihlcnIsIGlzQXNzZXJ0aW9uRXJyb3JDYWxsc2l0ZUZyYW1lKSA6IGdldENhbGxzaXRlRm9yRXJyb3IoZXJyKTtcblxuICAgICAgICByZXR1cm4gaXNBc3NlcnRpb25FcnJvciA/XG4gICAgICAgICAgICBuZXcgRXh0ZXJuYWxBc3NlcnRpb25MaWJyYXJ5RXJyb3IoZXJyLCBjYWxsc2l0ZSkgOlxuICAgICAgICAgICAgbmV3IFVuY2F1Z2h0RXJyb3JJblRlc3RDb2RlKGVyciwgY2FsbHNpdGUpO1xuICAgIH1cblxuICAgIGlmIChlcnIgJiYgZXJyLmlzSW50ZXJuYWxFcnJvcilcbiAgICAgICAgcmV0dXJuIG5ldyBVbmNhdWdodEV4Y2VwdGlvbkVycm9yKGVyci5zdGFjayk7XG5cbiAgICByZXR1cm4gbmV3IFVuY2F1Z2h0Tm9uRXJyb3JPYmplY3RJblRlc3RDb2RlKGVycik7XG59XG4iXX0=